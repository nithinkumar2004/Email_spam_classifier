# -*- coding: utf-8 -*-
"""email spam classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rreB9y66K3lyrm8gOHWssr6ZkxtPybkp
"""

!pip install numpy pandas scikit-learn



import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

df=pd.read_csv('/content/mail_data.csv')
print(df)

data=df.where((pd.notnull(df)),'')

data.head(10)

data.info()

data.shape

data.loc[data['Category']=='spam','Category',] = 0
data.loc[data['Category']=='ham','Category',]=1

X=data['Message']
Y=data['Category']

print(X)

print(Y)

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=3)

print(X.shape)
print(X_train.shape)
print(X_test.shape)

print(Y.shape)
print(Y_train.shape)
print(Y_test.shape)

feature_extraction = TfidfVectorizer(min_df=1, stop_words='english',lowercase=True)

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

print(X_train)

print(X_train_features)

model = LogisticRegression()

model.fit(X_train_features, Y_train)

prediction_on_training_data=model.predict(X_train_features)
accuracy_on_training_data=accuracy_score(Y_train,prediction_on_training_data)

print('Accuracy on training data:',accuracy_on_training_data)

prediction_on_test_data=model.predict(X_test_features)
accuracy_on_test_data=accuracy_score(Y_test,prediction_on_test_data)

print('accuracy on test data :',accuracy_on_test_data)

# Assuming 'feature_extraction' and 'model' have already been defined and trained

# Take user input for the email message
input_your_mail = input("Enter your message: ")

# Transform the input text using the feature extraction method (e.g., TfidfVectorizer)
input_data_features = feature_extraction.transform([input_your_mail])

# Predict whether it's safe or spam
prediction = model.predict(input_data_features)

# Print the prediction result
if prediction[0] == 1:
    print("Safe mail")
else:
    print("Spam mail")